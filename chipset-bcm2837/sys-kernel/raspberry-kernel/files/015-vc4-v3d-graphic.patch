Index: kernel-rpi/drivers/gpu/drm/v3d/Makefile
===================================================================
--- kernel-rpi.orig/drivers/gpu/drm/v3d/Makefile
+++ kernel-rpi/drivers/gpu/drm/v3d/Makefile
@@ -4,6 +4,7 @@
 # core driver code
 v3d-y := \
 	v3d_bo.o \
+  v3d_vc4_bind.o \
 	v3d_drv.o \
 	v3d_fence.o \
 	v3d_gem.o \
Index: kernel-rpi/drivers/gpu/drm/v3d/v3d_bo.c
===================================================================
--- kernel-rpi.orig/drivers/gpu/drm/v3d/v3d_bo.c
+++ kernel-rpi/drivers/gpu/drm/v3d/v3d_bo.c
@@ -24,6 +24,7 @@
 
 #include "v3d_drv.h"
 #include "uapi/drm/v3d_drm.h"
+#include "v3d_vc4_bind.h"
 
 /* Called DRM core on the last userspace/kernel unreference of the
  * BO.
@@ -32,6 +33,7 @@ void v3d_free_object(struct drm_gem_obje
 {
 	struct v3d_dev *v3d = to_v3d_dev(obj->dev);
 	struct v3d_bo *bo = to_v3d_bo(obj);
+  u32 vc4_handle = bo->vc4_handle;
 
 	v3d_mmu_remove_ptes(bo);
 
@@ -47,6 +49,10 @@ void v3d_free_object(struct drm_gem_obje
 	/* GPU execution may have dirtied any pages in the BO. */
 	bo->base.pages_mark_dirty_on_put = true;
 
+  if (vc4_handle) {
+    DRM_DEBUG("free vc4_handle:%u\n", vc4_handle);
+    free_bo_from_vc4(vc4_handle);
+  }
 	drm_gem_shmem_free_object(obj);
 }
 
@@ -170,14 +176,35 @@ int v3d_create_bo_ioctl(struct drm_devic
 			struct drm_file *file_priv)
 {
 	struct drm_v3d_create_bo *args = data;
+  struct drm_gem_object *gem_obj;
 	struct v3d_bo *bo = NULL;
+  u32 vc4_handle;
 	int ret;
 
-	if (args->flags != 0) {
-		DRM_INFO("unknown create_bo flags: %d\n", args->flags);
+	if (args->flags != 0 && args->flags != ARC_CALLOC) {
+		DRM_DEBUG("unknown create_bo flags: %d\n", args->flags);
 		return -EINVAL;
 	}
 
+  if (is_vc4_enable() && args->flags == ARC_CALLOC) {
+    ret = import_bo_from_vc4(dev, file_priv, PAGE_ALIGN(args->size), &vc4_handle, &args->handle);
+    if (!ret) {
+      gem_obj = drm_gem_object_lookup(file_priv, args->handle);
+      if (!gem_obj) {
+        DRM_ERROR("Failed to look up new imported GEM BO %d\n", args->handle);
+        return -EINVAL;
+      }
+      bo = to_v3d_bo(gem_obj);
+      bo->vc4_handle = vc4_handle;
+      DRM_DEBUG("store vc4 handle:%u, dma_buf:%p, attachment_dma_buf:%p, size:%luKB", bo->vc4_handle,
+        gem_obj->dma_buf,
+        gem_obj->import_attach->dmabuf,
+        gem_obj->size/1024);
+      drm_gem_object_put(gem_obj);
+      return 0;
+    }
+  }
+
 	bo = v3d_bo_create(dev, file_priv, PAGE_ALIGN(args->size));
 	if (IS_ERR(bo))
 		return PTR_ERR(bo);
@@ -197,7 +224,7 @@ int v3d_mmap_bo_ioctl(struct drm_device
 	struct drm_gem_object *gem_obj;
 
 	if (args->flags != 0) {
-		DRM_INFO("unknown mmap_bo flags: %d\n", args->flags);
+		DRM_DEBUG("unknown mmap_bo flags: %d\n", args->flags);
 		return -EINVAL;
 	}
 
Index: kernel-rpi/drivers/gpu/drm/v3d/v3d_vc4_bind.h
===================================================================
--- /dev/null
+++ kernel-rpi/drivers/gpu/drm/v3d/v3d_vc4_bind.h
@@ -0,0 +1,22 @@
+// SPDX-License-Identifier: GPL-2.0+
+/* Copyright (C) 2020 FydeOS team */
+/* Author: Yang Tsao (yang@fydeos.io)*/
+
+#ifndef V3D_VC4_BIND_H
+#define V3D_VC4_BIND_H
+#include <drm/drm_device.h>
+#include <drm/drm_file.h>
+
+#define ARC_CALLOC (1<<7)
+extern struct drm_device *vc4_drm;
+extern struct drm_file *vc4_drm_file;
+
+static inline bool is_vc4_enable(void) {
+  return vc4_drm != NULL && vc4_drm_file != NULL;
+}
+
+int import_bo_from_vc4(struct drm_device *dev, struct drm_file *file_priv,
+  size_t unaligned_size, u32 *vc4_handle, u32 *handle);
+
+void free_bo_from_vc4(u32 handle);
+#endif /* V3D_VC4_BIND_H */
Index: kernel-rpi/drivers/gpu/drm/v3d/v3d_drv.c
===================================================================
--- kernel-rpi.orig/drivers/gpu/drm/v3d/v3d_drv.c
+++ kernel-rpi/drivers/gpu/drm/v3d/v3d_drv.c
@@ -178,14 +178,14 @@ DEFINE_DRM_GEM_FOPS(v3d_drm_fops);
  * need to stay DRM_AUTH until we do buffer size/offset validation.
  */
 static const struct drm_ioctl_desc v3d_drm_ioctls[] = {
-	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_CL, v3d_submit_cl_ioctl, DRM_RENDER_ALLOW | DRM_AUTH),
+	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_CL, v3d_submit_cl_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_WAIT_BO, v3d_wait_bo_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_CREATE_BO, v3d_create_bo_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_MMAP_BO, v3d_mmap_bo_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_GET_PARAM, v3d_get_param_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_GET_BO_OFFSET, v3d_get_bo_offset_ioctl, DRM_RENDER_ALLOW),
-	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_TFU, v3d_submit_tfu_ioctl, DRM_RENDER_ALLOW | DRM_AUTH),
-	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_CSD, v3d_submit_csd_ioctl, DRM_RENDER_ALLOW | DRM_AUTH),
+	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_TFU, v3d_submit_tfu_ioctl, DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_CSD, v3d_submit_csd_ioctl, DRM_RENDER_ALLOW),
 };
 
 static struct drm_driver v3d_drm_driver = {
@@ -332,6 +332,7 @@ static int v3d_platform_drm_probe(struct
 
 	ret = clk_set_rate(v3d->clk, v3d->clk_down_rate);
 	WARN_ON_ONCE(ret != 0);
+//  init_v3d_vc4_bind();
 
 	return 0;
 
Index: kernel-rpi/drivers/gpu/drm/v3d/v3d_drv.h
===================================================================
--- kernel-rpi.orig/drivers/gpu/drm/v3d/v3d_drv.h
+++ kernel-rpi/drivers/gpu/drm/v3d/v3d_drv.h
@@ -151,6 +151,7 @@ struct v3d_bo {
 	 * v3d_render_job->unref_list
 	 */
 	struct list_head unref_head;
+  u32 vc4_handle;
 };
 
 static inline struct v3d_bo *
Index: kernel-rpi/drivers/gpu/drm/v3d/v3d_vc4_bind.c
===================================================================
--- /dev/null
+++ kernel-rpi/drivers/gpu/drm/v3d/v3d_vc4_bind.c
@@ -0,0 +1,49 @@
+#include <linux/syscalls.h>
+#include <drm/drm_drv.h>
+#include <drm/drm_prime.h>
+#include "v3d_vc4_bind.h"
+#include "../vc4/vc4_drv.h"
+
+#include "uapi/drm/vc4_drm.h"
+
+int import_bo_from_vc4(struct drm_device *dev,
+    struct drm_file *file_priv, size_t unaligned_size, u32 *vc4_handle, u32 *handle)
+{
+  struct drm_vc4_create_bo args = {0};
+  int ret, prime_fd = 0;
+
+  if (!is_vc4_enable())
+    return -ENODEV;
+
+  args.size = unaligned_size;
+  args.flags = ARC_CALLOC;
+  ret = vc4_create_bo_ioctl(vc4_drm, &args, vc4_drm_file);
+  if (ret)
+    goto out;
+  *vc4_handle = args.handle;
+  ret = drm_gem_prime_handle_to_fd(vc4_drm, vc4_drm_file, args.handle,
+     DRM_CLOEXEC | DRM_RDWR, &prime_fd);
+  if (ret)
+    ret = drm_gem_prime_handle_to_fd(vc4_drm, vc4_drm_file, args.handle,
+         DRM_CLOEXEC, &prime_fd);
+  if (ret)
+    goto release_vc4_bo;
+
+  if (!drm_gem_prime_fd_to_handle(dev, file_priv, prime_fd, handle))
+		goto out;
+
+release_vc4_bo:
+  free_bo_from_vc4(args.handle);
+out:
+  if(prime_fd)
+    ksys_close(prime_fd);
+  if (ret)
+  	DRM_ERROR("Borrow bo from vc4 size:%uk, vc4 handle:%u, fd:%d, v3d handle:%u, ret:%d\n",
+      (u32) (unaligned_size / 1024), *vc4_handle, prime_fd, *handle, ret);
+  return ret;
+}
+
+void free_bo_from_vc4(u32 handle) {
+  vc4_move_to_purgeable_pool(vc4_drm_file, handle);
+  DRM_DEBUG("release borrowed vc4 handle:%d\n", handle);
+}
Index: kernel-rpi/drivers/gpu/drm/vc4/vc4_bo.c
===================================================================
--- kernel-rpi.orig/drivers/gpu/drm/vc4/vc4_bo.c
+++ kernel-rpi/drivers/gpu/drm/vc4/vc4_bo.c
@@ -30,6 +30,7 @@ static const char * const bo_type_names[
 	"RCL",
 	"BCL",
 	"kernel BO cache",
+  "V3D Bind",
 };
 
 static bool is_user_label(int label)
@@ -527,6 +528,10 @@ void vc4_free_object(struct drm_gem_obje
 	struct vc4_bo *bo = to_vc4_bo(gem_bo);
 	struct list_head *cache_list;
 
+  if (bo->label == VC4_BO_TYPE_V3D_BIND) {
+    DRM_DEBUG("Free v3d bind bo usecnt:%u, refcnt:%u, size:%luKB, attach:%s", refcount_read(&bo->usecnt),
+      kref_read(&gem_bo->refcount), gem_bo->size/1024,gem_bo->import_attach? "yes":"no");
+  }
 	/* Remove the BO from the purgeable list. */
 	mutex_lock(&bo->madv_lock);
 	if (bo->madv == VC4_MADV_DONTNEED && !refcount_read(&bo->usecnt))
@@ -543,6 +548,7 @@ void vc4_free_object(struct drm_gem_obje
 
 	/* Don't cache if it was publicly named. */
 	if (gem_bo->name) {
+    DRM_DEBUG("destory by name.");
 		vc4_bo_destroy(bo);
 		goto out;
 	}
@@ -552,12 +558,14 @@ void vc4_free_object(struct drm_gem_obje
 	 * purged.
 	 */
 	if (!bo->base.vaddr) {
+    DRM_DEBUG("destory by no vaddr.");
 		vc4_bo_destroy(bo);
 		goto out;
 	}
 
 	cache_list = vc4_get_cache_list_for_size(dev, gem_bo->size);
 	if (!cache_list) {
+    DRM_DEBUG("destory by no cache_list.");
 		vc4_bo_destroy(bo);
 		goto out;
 	}
@@ -795,6 +803,7 @@ vc4_prime_import_sg_table(struct drm_dev
 
 static int vc4_grab_bin_bo(struct vc4_dev *vc4, struct vc4_file *vc4file)
 {
+#ifndef CONFIG_DRM_V3D
 	int ret;
 
 	if (!vc4->v3d)
@@ -806,7 +815,7 @@ static int vc4_grab_bin_bo(struct vc4_de
 	ret = vc4_v3d_bin_bo_get(vc4, &vc4file->bin_bo_used);
 	if (ret)
 		return ret;
-
+#endif
 	return 0;
 }
 
@@ -827,7 +836,8 @@ int vc4_create_bo_ioctl(struct drm_devic
 	 * We can't allocate from the BO cache, because the BOs don't
 	 * get zeroed, and that might leak data between users.
 	 */
-	bo = vc4_bo_create(dev, args->size, false, VC4_BO_TYPE_V3D);
+	bo = vc4_bo_create(dev, args->size, false, args->flags == V3D_BIND ?
+        VC4_BO_TYPE_V3D_BIND : VC4_BO_TYPE_V3D);
 	if (IS_ERR(bo))
 		return PTR_ERR(bo);
 
@@ -875,12 +885,12 @@ vc4_create_shader_bo_ioctl(struct drm_de
 		return -EINVAL;
 
 	if (args->flags != 0) {
-		DRM_INFO("Unknown flags set: 0x%08x\n", args->flags);
+		DRM_DEBUG("Unknown flags set: 0x%08x\n", args->flags);
 		return -EINVAL;
 	}
 
 	if (args->pad != 0) {
-		DRM_INFO("Pad set: 0x%08x\n", args->pad);
+		DRM_DEBUG("Pad set: 0x%08x\n", args->pad);
 		return -EINVAL;
 	}
 
@@ -1096,3 +1106,18 @@ int vc4_label_bo_ioctl(struct drm_device
 
 	return ret;
 }
+
+void vc4_move_to_purgeable_pool(struct drm_file *file_priv, u32 handle) {
+  struct drm_gem_object *gem_obj;
+  struct vc4_bo *bo;
+  gem_obj = drm_gem_object_lookup(file_priv, handle);
+  if (!gem_obj) {
+    DRM_ERROR("Failed to look up GEM BO %d to purgeable\n", handle);
+    return;
+  }
+  bo = to_vc4_bo(gem_obj);
+  mutex_lock(&bo->madv_lock);
+  bo->madv = VC4_MADV_DONTNEED;
+  mutex_unlock(&bo->madv_lock);
+  vc4_bo_dec_usecnt(bo);
+}
Index: kernel-rpi/drivers/gpu/drm/vc4/vc4_drv.c
===================================================================
--- kernel-rpi.orig/drivers/gpu/drm/vc4/vc4_drv.c
+++ kernel-rpi/drivers/gpu/drm/vc4/vc4_drv.c
@@ -42,6 +42,7 @@
 
 #include "vc4_drv.h"
 #include "vc4_regs.h"
+#include "../v3d/v3d_vc4_bind.h"
 
 #define DRIVER_NAME "vc4"
 #define DRIVER_DESC "Broadcom VC4 graphics"
@@ -50,6 +51,11 @@
 #define DRIVER_MINOR 0
 #define DRIVER_PATCHLEVEL 0
 
+struct drm_device *vc4_drm = NULL;
+EXPORT_SYMBOL(vc4_drm);
+struct drm_file *vc4_drm_file = NULL;
+EXPORT_SYMBOL(vc4_drm_file);
+
 /* Helper function for mapping the regs on a platform device. */
 void __iomem *vc4_ioremap_regs(struct platform_device *dev, int index)
 {
@@ -127,6 +133,7 @@ static int vc4_open(struct drm_device *d
 
 	vc4_perfmon_open_file(vc4file);
 	file->driver_priv = vc4file;
+  vc4_drm_file = file;
 	return 0;
 }
 
@@ -137,7 +144,6 @@ static void vc4_close(struct drm_device
 
 	if (vc4file->bin_bo_used)
 		vc4_v3d_bin_bo_put(vc4);
-
 	vc4_perfmon_close_file(vc4file);
 	kfree(vc4file);
 }
@@ -290,12 +296,15 @@ static int vc4_drm_bind(struct device *d
 	node = of_find_matching_node_and_match(NULL, vc4_dma_range_matches,
 					       NULL);
 	if (node) {
+    pr_info("vc4 dma node name:%s(%s)\n", node->full_name, node->name);
 		ret = of_dma_configure(dev, node, true);
 		of_node_put(node);
 
 		if (ret)
 			return ret;
-	}
+	}else {
+    pr_info("vc4 dma no node configure\n");
+  }
 
 	vc4 = devm_drm_dev_alloc(dev, &vc4_drm_driver, struct vc4_dev, base);
 	if (IS_ERR(vc4))
@@ -362,6 +371,7 @@ static int vc4_drm_bind(struct device *d
 		goto unbind_all;
 
 	drm_fbdev_generic_setup(drm, 16);
+  vc4_drm = drm;
 
 	return 0;
 
@@ -374,7 +384,8 @@ unbind_all:
 static void vc4_drm_unbind(struct device *dev)
 {
 	struct drm_device *drm = dev_get_drvdata(dev);
-
+  vc4_drm = NULL;
+  vc4_drm_file = NULL;
 	drm_dev_unregister(drm);
 
 	drm_atomic_helper_shutdown(drm);
Index: kernel-rpi/drivers/gpu/drm/vc4/vc4_drv.h
===================================================================
--- kernel-rpi.orig/drivers/gpu/drm/vc4/vc4_drv.h
+++ kernel-rpi/drivers/gpu/drm/vc4/vc4_drv.h
@@ -21,6 +21,9 @@
 #include "uapi/drm/vc4_drm.h"
 #include "vc4_regs.h"
 
+#define CURSOR_TIMEOUT_MSEC 20
+#define V3D_BIND (1<<7)
+
 struct drm_device;
 struct drm_gem_object;
 
@@ -39,6 +42,7 @@ enum vc4_kernel_bo_type {
 	VC4_BO_TYPE_RCL,
 	VC4_BO_TYPE_BCL,
 	VC4_BO_TYPE_KERNEL_CACHE,
+  VC4_BO_TYPE_V3D_BIND,
 	VC4_BO_TYPE_COUNT
 };
 
@@ -876,6 +880,7 @@ int vc4_bo_inc_usecnt(struct vc4_bo *bo)
 void vc4_bo_dec_usecnt(struct vc4_bo *bo);
 void vc4_bo_add_to_purgeable_pool(struct vc4_bo *bo);
 void vc4_bo_remove_from_purgeable_pool(struct vc4_bo *bo);
+void vc4_move_to_purgeable_pool(struct drm_file *file_priv, u32 handle);
 
 /* vc4_crtc.c */
 extern struct platform_driver vc4_crtc_driver;
@@ -1047,5 +1052,4 @@ int vc4_perfmon_destroy_ioctl(struct drm
 			      struct drm_file *file_priv);
 int vc4_perfmon_get_values_ioctl(struct drm_device *dev, void *data,
 				 struct drm_file *file_priv);
-
 #endif /* _VC4_DRV_H_ */
Index: kernel-rpi/drivers/gpu/drm/vc4/vc4_kms.c
===================================================================
--- kernel-rpi.orig/drivers/gpu/drm/vc4/vc4_kms.c
+++ kernel-rpi/drivers/gpu/drm/vc4/vc4_kms.c
@@ -353,7 +353,7 @@ vc4_atomic_complete_commit(struct drm_at
 						500000000,
 						hvs_state->core_clock_rate);
 
-		drm_dbg(dev, "Raising the core clock at %lu Hz\n", core_rate);
+		/*drm_dbg(dev, "Raising the core clock at %lu Hz\n", core_rate);*/
 
 		/*
 		 * Do a temporary request on the core clock during the
@@ -398,9 +398,10 @@ vc4_atomic_complete_commit(struct drm_at
 	drm_atomic_helper_commit_cleanup_done(state);
 
 	if (vc4->hvs && vc4->hvs->hvs5) {
+    /*
 		drm_dbg(dev, "Running the core clock at %lu Hz\n",
 			hvs_state->core_clock_rate);
-
+    */
 		/*
 		 * Request a clock rate based on the current HVS
 		 * requirements.
@@ -444,6 +445,7 @@ static int vc4_atomic_commit(struct drm_
 {
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	int ret;
+  unsigned long before_wait;
 
 	if (state->async_update) {
 		ret = down_interruptible(&vc4->async_modeset);
@@ -489,8 +491,9 @@ static int vc4_atomic_commit(struct drm_
 	}
 
 	if (!nonblock) {
+    before_wait = jiffies;
 		ret = drm_atomic_helper_wait_for_fences(dev, state, true);
-		if (ret) {
+		if (ret || (jiffies_to_msecs(jiffies - before_wait) > CURSOR_TIMEOUT_MSEC)) {
 			drm_atomic_helper_cleanup_planes(dev, state);
 			up(&vc4->async_modeset);
 			return ret;
Index: kernel-rpi/drivers/gpu/drm/Makefile
===================================================================
--- kernel-rpi.orig/drivers/gpu/drm/Makefile
+++ kernel-rpi/drivers/gpu/drm/Makefile
@@ -72,8 +72,8 @@ obj-$(CONFIG_DRM_MGA)	+= mga/
 obj-$(CONFIG_DRM_I810)	+= i810/
 obj-$(CONFIG_DRM_I915)	+= i915/
 obj-$(CONFIG_DRM_MGAG200) += mgag200/
-obj-$(CONFIG_DRM_V3D)  += v3d/
 obj-$(CONFIG_DRM_VC4)  += vc4/
+obj-$(CONFIG_DRM_V3D)  += v3d/
 obj-$(CONFIG_DRM_SIS)   += sis/
 obj-$(CONFIG_DRM_SAVAGE)+= savage/
 obj-$(CONFIG_DRM_VMWGFX)+= vmwgfx/
