Index: rpi4-kernel/drivers/md/dm-verity-target.c
===================================================================
--- rpi4-kernel.orig/drivers/md/dm-verity-target.c
+++ rpi4-kernel/drivers/md/dm-verity-target.c
@@ -33,8 +33,9 @@
 #define DM_VERITY_OPT_PANIC		"panic_on_corruption"
 #define DM_VERITY_OPT_IGN_ZEROES	"ignore_zero_blocks"
 #define DM_VERITY_OPT_AT_MOST_ONCE	"check_at_most_once"
+#define DM_VERITY_OPT_ERROR_BEHAVIOR  "error_behavior"
 
-#define DM_VERITY_OPTS_MAX		(3 + DM_VERITY_OPTS_FEC + \
+#define DM_VERITY_OPTS_MAX		(4 + DM_VERITY_OPTS_FEC + \
 					 DM_VERITY_ROOT_HASH_VERIFICATION_OPTS)
 
 static unsigned dm_verity_prefetch_cluster = DM_VERITY_DEFAULT_PREFETCH_SIZE;
@@ -48,6 +49,39 @@ struct dm_verity_prefetch_work {
 	unsigned n_blocks;
 };
 
+static char *error_behavior_istring[] = { "0", "1", "2", "3" };
+static const char *allowed_error_behaviors[] = { "eio", "panic", "none",
+             "notify", NULL };
+static char *error_behavior = "eio";
+module_param(error_behavior, charp, 0644);
+MODULE_PARM_DESC(error_behavior, "Behavior on error "
+         "(eio, panic, none, notify)");
+
+
+/**
+ * verity_parse_error_behavior - parse a behavior charp to the enum
+ * @behavior: NUL-terminated char array
+ *
+ * Checks if the behavior is valid either as text or as an index digit
+ * and returns the proper enum value in string form or ERR_PTR(-EINVAL)
+ * on error.
+ */
+static char *verity_parse_error_behavior(const char *behavior)
+{
+  const char **allowed = allowed_error_behaviors;
+  int index;
+
+  for (index = 0; *allowed; allowed++, index++)
+    if (!strcmp(*allowed, behavior) || behavior[0] == index + '0')
+      break;
+
+  if (!*allowed)
+    return ERR_PTR(-EINVAL);
+
+  /* Convert to the integer index matching the enum. */
+  return error_behavior_istring[index];
+}
+
 /*
  * Auxiliary structure appended to each dm-bufio buffer. If the value
  * hash_verified is nonzero, hash of the block has been verified.
@@ -1012,6 +1046,21 @@ static int verity_parse_opt_args(struct
 				return r;
 			continue;
 
+    } else if (!strcasecmp(arg_name, DM_VERITY_OPT_ERROR_BEHAVIOR)) {
+      int behavior;
+
+      if (!argc) {
+        ti->error = "Missing error behavior parameter";
+        return -EINVAL;
+      }
+      if (kstrtoint(dm_shift_arg(as), 0, &behavior) ||
+          behavior < 0) {
+        ti->error = "Bad error behavior parameter";
+        return -EINVAL;
+      }
+      v->error_behavior = behavior;
+      argc--;
+      continue;
 		} else if (verity_is_fec_opt_arg(arg_name)) {
 			r = verity_fec_parse_opt_args(as, v, &argc, arg_name);
 			if (r)
@@ -1034,6 +1083,110 @@ static int verity_parse_opt_args(struct
 	return r;
 }
 
+static void splitarg(char *arg, char **key, char **val)
+{
+  *key = strsep(&arg, "=");
+  *val = strsep(&arg, "");
+}
+
+static char *chromeos_args(unsigned *pargc, char ***pargv)
+{
+  char *hashstart = NULL;
+  char **argv = *pargv;
+  int argc = *pargc;
+  char *key, *val;
+  int nargc = 10;
+  char **nargv;
+  char *errstr;
+  int i;
+
+  nargv = kcalloc(14, sizeof(char *), GFP_KERNEL);
+  if (!nargv)
+    return "Failed to allocate memory";
+
+  nargv[0] = "0";   /* version */
+  nargv[3] = "4096";  /* hash block size */
+  nargv[4] = "4096";  /* data block size */
+  nargv[9] = "-";   /* salt (optional) */
+
+  for (i = 0; i < argc; ++i) {
+    DMDEBUG("Argument %d: '%s'", i, argv[i]);
+    splitarg(argv[i], &key, &val);
+    if (!key) {
+      DMWARN("Bad argument %d: missing key?", i);
+      errstr = "Bad argument: missing key";
+      goto err;
+    }
+    if (!val) {
+      DMWARN("Bad argument %d='%s': missing value", i, key);
+      errstr = "Bad argument: missing value";
+      goto err;
+    }
+    if (!strcmp(key, "alg")) {
+      nargv[7] = val;
+    } else if (!strcmp(key, "payload")) {
+      nargv[1] = val;
+    } else if (!strcmp(key, "hashtree")) {
+      nargv[2] = val;
+    } else if (!strcmp(key, "root_hexdigest")) {
+      nargv[8] = val;
+    } else if (!strcmp(key, "hashstart")) {
+      unsigned long num;
+
+      if (kstrtoul(val, 10, &num)) {
+        errstr = "Invalid hashstart";
+        goto err;
+      }
+      num >>= (12 - SECTOR_SHIFT);
+      hashstart = kmalloc(24, GFP_KERNEL);
+      if (!hashstart) {
+        errstr = "Failed to allocate memory";
+        goto err;
+      }
+      scnprintf(hashstart, sizeof(hashstart), "%lu", num);
+      nargv[5] = hashstart;
+      nargv[6] = hashstart;
+    } else if (!strcmp(key, "salt")) {
+      nargv[9] = val;
+    } else if (!strcmp(key, DM_VERITY_OPT_ERROR_BEHAVIOR)) {
+      char *behavior = verity_parse_error_behavior(val);
+
+      if (IS_ERR(behavior)) {
+        errstr = "Invalid error behavior";
+        goto err;
+      }
+      nargv[10] = "2";
+      nargv[11] = key;
+      nargv[12] = behavior;
+      nargc = 13;
+    }
+  }
+
+  if (!nargv[1] || !nargv[2] || !nargv[5] || !nargv[7] || !nargv[8]) {
+    errstr = "Missing argument";
+    goto err;
+  }
+
+  *pargc = nargc;
+  *pargv = nargv;
+  return NULL;
+
+err:
+  kfree(nargv);
+  kfree(hashstart);
+  return errstr;
+}
+
+/* Release memory allocated for Chrome OS parameter conversion */
+
+static void free_chromeos_argv(char **argv)
+{
+  if (argv) {
+    kfree(argv[5]);
+    kfree(argv);
+  }
+}
+
 /*
  * Target parameters:
  *	<version>	The current format is version 1.
@@ -1060,6 +1213,14 @@ static int verity_ctr(struct dm_target *
 	sector_t hash_position;
 	char dummy;
 	char *root_hash_digest_to_validate;
+  char **chromeos_argv = NULL;
+
+  if (argc < 10) {
+    ti->error = chromeos_args(&argc, &argv);
+    if (ti->error)
+      return -EINVAL;
+    chromeos_argv = argv;
+  }
 
 	v = kzalloc(sizeof(struct dm_verity), GFP_KERNEL);
 	if (!v) {
@@ -1299,6 +1460,7 @@ static int verity_ctr(struct dm_target *
 				       __alignof__(struct dm_verity_io));
 
 	verity_verify_sig_opts_cleanup(&verify_args);
+  free_chromeos_argv(chromeos_argv);
 
 	return 0;
 
@@ -1306,7 +1468,7 @@ bad:
 
 	verity_verify_sig_opts_cleanup(&verify_args);
 	verity_dtr(ti);
-
+  free_chromeos_argv(chromeos_argv);
 	return r;
 }
 
Index: rpi4-kernel/drivers/md/dm-verity.h
===================================================================
--- rpi4-kernel.orig/drivers/md/dm-verity.h
+++ rpi4-kernel/drivers/md/dm-verity.h
@@ -56,6 +56,7 @@ struct dm_verity {
 	int hash_failed;	/* set to 1 if hash of any block failed */
 	enum verity_mode mode;	/* mode for handling verification errors */
 	unsigned corrupted_errs;/* Number of errors for corrupted blocks */
+  int error_behavior; /* selects error behavior on io errors */
 
 	struct workqueue_struct *verify_wq;
 
