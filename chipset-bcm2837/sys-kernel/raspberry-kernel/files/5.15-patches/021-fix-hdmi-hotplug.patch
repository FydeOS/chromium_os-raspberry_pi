Index: rpi4-kernel/drivers/gpu/drm/vc4/vc4_hdmi.h
===================================================================
--- rpi4-kernel.orig/drivers/gpu/drm/vc4/vc4_hdmi.h
+++ rpi4-kernel/drivers/gpu/drm/vc4/vc4_hdmi.h
@@ -5,6 +5,8 @@
 #include <media/cec.h>
 #include <sound/dmaengine_pcm.h>
 #include <sound/soc.h>
+#include <sound/hdmi-codec.h>
+#include <sound/jack.h>
 
 #include "vc4_drv.h"
 
@@ -228,6 +230,11 @@ struct vc4_hdmi {
 	 */
 	int broadcast_rgb;
 
+  struct snd_soc_jack hdmi_jack;
+  hdmi_codec_plugged_cb plugged_cb;
+  struct device *codec_dev;
+  enum drm_connector_status last_connector_result;
+
 	/* VC5 debugfs regset */
 	struct debugfs_regset32 cec_regset;
 	struct debugfs_regset32 csc_regset;
Index: rpi4-kernel/drivers/gpu/drm/vc4/vc4_hdmi.c
===================================================================
--- rpi4-kernel.orig/drivers/gpu/drm/vc4/vc4_hdmi.c
+++ rpi4-kernel/drivers/gpu/drm/vc4/vc4_hdmi.c
@@ -131,6 +131,12 @@ static const char * const output_format_
 	[VC4_HDMI_OUTPUT_YUV444]	= "YUV 4:4:4",
 };
 
+static void handle_plugged_change(struct vc4_hdmi *hdmi, bool plugged)
+{
+	if (hdmi->plugged_cb && hdmi->codec_dev)
+		hdmi->plugged_cb(hdmi->codec_dev, plugged);
+}
+
 static const char *vc4_hdmi_output_fmt_str(enum vc4_hdmi_output_format fmt)
 {
 	if (fmt >= ARRAY_SIZE(output_format_str))
@@ -431,6 +437,11 @@ static void vc4_hdmi_handle_hotplug(stru
 
 	if (status == connector->status)
 		return;
+  if (status != vc4_hdmi->last_connector_result) {
+    dev_dbg(&vc4_hdmi->pdev->dev, "vc4 hdmi connector status:%d", status);
+    handle_plugged_change(vc4_hdmi, status == connector_status_connected);
+    vc4_hdmi->last_connector_result = status;
+  }
 
 	if (status == connector_status_disconnected) {
 		cec_phys_addr_invalidate(vc4_hdmi->cec_adap);
@@ -2656,11 +2667,26 @@ static int vc4_hdmi_audio_get_eld(struct
 	return 0;
 }
 
+static int vc4_hdmi_audio_hook_plugged_cb(struct device *dev, void *data,
+			       hdmi_codec_plugged_cb fn,
+			       struct device *codec_dev) {
+  struct vc4_hdmi *vc4_hdmi = dev_get_drvdata(dev);
+  bool plugged;
+  mutex_lock(&vc4_hdmi->mutex);
+  vc4_hdmi->plugged_cb = fn;
+  vc4_hdmi->codec_dev = codec_dev;
+  plugged = vc4_hdmi->last_connector_result == connector_status_connected;
+  handle_plugged_change(vc4_hdmi, plugged);
+  mutex_unlock(&vc4_hdmi->mutex);
+  return 0;
+}
+
 static const struct hdmi_codec_ops vc4_hdmi_codec_ops = {
 	.get_eld = vc4_hdmi_audio_get_eld,
 	.prepare = vc4_hdmi_audio_prepare,
 	.audio_shutdown = vc4_hdmi_audio_shutdown,
 	.audio_startup = vc4_hdmi_audio_startup,
+  .hook_plugged_cb = vc4_hdmi_audio_hook_plugged_cb,
 };
 
 static struct hdmi_codec_pdata vc4_hdmi_codec_pdata = {
@@ -2677,6 +2703,20 @@ static void vc4_hdmi_audio_codec_release
 	vc4_hdmi->audio.codec_pdev = NULL;
 }
 
+static int vc4_hdmi_link_init(struct snd_soc_pcm_runtime *runtime) {
+  struct snd_soc_card *card = runtime->card;
+  struct snd_soc_component *component = asoc_rtd_to_codec(runtime, 0)->component;
+  struct vc4_hdmi *vc4_hdmi = snd_soc_card_get_drvdata(card);
+  int ret;
+  ret = snd_soc_card_jack_new(card, "HDMI Jack", SND_JACK_LINEOUT,
+                              &vc4_hdmi->hdmi_jack, NULL, 0);
+  if (ret) {
+    dev_err(card->dev, "Can't new HDMI Jack %d\n", ret);
+    return ret;
+  }
+  return snd_soc_component_set_jack(component, &vc4_hdmi->hdmi_jack, NULL);
+}
+
 static int vc4_hdmi_audio_init(struct vc4_hdmi *vc4_hdmi)
 {
 	const struct vc4_hdmi_register *mai_data =
@@ -2794,6 +2834,7 @@ static int vc4_hdmi_audio_init(struct vc
 	dai_link->cpus		= &vc4_hdmi->audio.cpu;
 	dai_link->codecs	= &vc4_hdmi->audio.codec;
 	dai_link->platforms	= &vc4_hdmi->audio.platform;
+  dai_link->init = vc4_hdmi_link_init;
 
 	dai_link->num_cpus	= 1;
 	dai_link->num_codecs	= 1;
