Index: mesa/src/broadcom/vulkan/v3dv_device.c
===================================================================
--- mesa.orig/src/broadcom/vulkan/v3dv_device.c
+++ mesa/src/broadcom/vulkan/v3dv_device.c
@@ -1236,7 +1236,7 @@ create_physical_device(struct v3dv_insta
    if (display_device)
       primary_path = display_device->nodes[DRM_NODE_PRIMARY];
    else
-      primary_path = NULL;
+      primary_path = gpu_device->nodes[DRM_NODE_PRIMARY];
 #else
    primary_path = gpu_device->nodes[DRM_NODE_PRIMARY];
 #endif
@@ -1459,6 +1459,7 @@ enumerate_devices(struct vk_instance *vk
             if (strncmp(*compat, "brcm,2711-v3d", 13) == 0 ||
                 strncmp(*compat, "brcm,2712-v3d", 13) == 0) {
                v3d_idx = i;
+               mesa_logi("find render:%s\n", devices[i]->businfo.platform->fullname);
                break;
             }
             compat++;
Index: mesa/src/broadcom/common/v3d_limits.h
===================================================================
--- mesa.orig/src/broadcom/common/v3d_limits.h
+++ mesa/src/broadcom/common/v3d_limits.h
@@ -59,7 +59,7 @@
 /* Minimum alignment for texel buffers */
 #define V3D_TMU_TEXEL_ALIGN 64
 
-#define V3D_MAX_IMAGE_DIMENSION 4096
+#define V3D_MAX_IMAGE_DIMENSION 8192
 
 /* The HW can do 16384 (15), but we run into hangs when we expose that. Also,
  * since we are only exposing images up to 4096 pixels per dimension 13 is
