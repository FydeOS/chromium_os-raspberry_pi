Index: adhd/cras/src/server/cras_alsa_io.c
===================================================================
--- adhd.orig/cras/src/server/cras_alsa_io.c
+++ adhd/cras/src/server/cras_alsa_io.c
@@ -256,6 +256,11 @@ static const struct {
         .type = CRAS_NODE_TYPE_ALSA_LOOPBACK,
         .position = NODE_POSITION_INTERNAL,
     },
+    {
+      .name = "vc4-hdmi",
+      .type = CRAS_NODE_TYPE_HDMI,
+      .position = NODE_POSITION_EXTERNAL,
+    },
 };
 
 static int set_hwparams(struct cras_iodev* iodev) {
@@ -2373,7 +2378,7 @@ int alsa_iodev_legacy_complete_init(stru
       !no_create_default_output_node(aio)) {
     if (first_internal_device(aio) && !has_node(aio, INTERNAL_SPEAKER) &&
         !has_node(aio, HDMI)) {
-      if (strstr(aio->base.info.name, HDMI)) {
+      if (strstr(aio->base.info.name, HDMI) || strstr(aio->base.info.name, "hdmi")) {
         new_output(aio, NULL, HDMI);
       } else {
         new_output(aio, NULL, INTERNAL_SPEAKER);
Index: adhd/cras/src/server/cras_alsa_io_common.c
===================================================================
--- adhd.orig/cras/src/server/cras_alsa_io_common.c
+++ adhd/cras/src/server/cras_alsa_io_common.c
@@ -14,16 +14,17 @@
 
 struct cras_ionode* first_plugged_node(struct cras_iodev* iodev) {
   struct cras_ionode* n;
+  struct cras_ionode *result = NULL;
 
   /* When this is called at iodev creation, none of the nodes
    * are selected. Just pick the first plugged one and let Chrome
    * choose it later. */
   DL_FOREACH (iodev->nodes, n) {
     if (n->plugged) {
-      return n;
+      result = n;
     }
   }
-  return iodev->nodes;
+  return result ? result: iodev->nodes;
 }
 
 /* Returns true if the corresponding node_info of the specified input node has
