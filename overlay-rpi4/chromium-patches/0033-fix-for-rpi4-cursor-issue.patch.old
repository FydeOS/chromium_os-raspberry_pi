From d1537f2f9587db8ca9f70f060a0a634df7766fcc Mon Sep 17 00:00:00 2001
From: Chen Fangzhou <fangzhou@fydeos.io>
Date: Sun, 30 May 2021 22:00:26 +0800
Subject: [PATCH 76/86] fix for rpi4 cursor issue

---
 ash/shell.cc                 | 15 +++++++++++++++
 ui/wm/core/cursor_manager.cc | 13 +++++++++++++
 ui/wm/core/cursor_manager.h  |  7 +++++++
 3 files changed, 35 insertions(+)

--- a/ash/shell.cc
+++ b/ash/shell.cc
@@ -251,6 +251,7 @@
 #include "ui/wm/core/shadow_controller.h"
 #include "ui/wm/core/visibility_controller.h"
 #include "ui/wm/core/window_modality_controller.h"
+#include "fydeos/switches/display/display_switches.h"
 
 namespace ash {
 
@@ -494,6 +495,13 @@
   CursorWindowController* cursor_window_controller =
       window_tree_host_manager_->cursor_window_controller();
 
+//---***FYDEOS BEGIN***---
+  if (fydeos::switches::ForceCursorCompositing()){
+    enabled = true;
+    VLOG(1) << "force cursor compositing:" << enabled;
+  }
+//---***FYDEOS END***---
+
   if (cursor_window_controller->is_cursor_compositing_enabled() == enabled)
     return;
   cursor_window_controller->SetCursorCompositingEnabled(enabled);
@@ -1396,6 +1404,10 @@
   // since it may need to add observers to root windows.
   window_restore_controller_ = std::make_unique<WindowRestoreController>();
 
+  if (fydeos::switches::ForceShowCursor()){
+    cursor_manager_->SetNoHideCursor();
+  }
+
   static_cast<CursorManager*>(cursor_manager_.get())->Init();
 
   mojo::PendingRemote<device::mojom::Fingerprint> fingerprint;
--- a/ui/wm/core/cursor_manager.cc
+++ b/ui/wm/core/cursor_manager.cc
@@ -91,6 +91,9 @@
       state_on_unlock_(new internal::CursorState) {
   // Restore the last cursor visibility state.
   current_state_->SetVisible(last_cursor_visibility_state_);
+  //---***FYDEOS BEGIN***---
+  no_hide_ = false;
+  //---***FYDEOS END***---
 }
 
 CursorManager::~CursorManager() {
@@ -127,7 +130,17 @@
   }
 }
 
+//---***FYDEOS BEGIN***---
+void CursorManager::SetNoHideCursor() {
+  no_hide_ = true;
+}
+//---***FYDEOS END***---
+
 void CursorManager::HideCursor() {
+  //---***FYDEOS BEGIN***---
+  if (no_hide_)
+    return;
+  //---***FYDEOS END***---
   last_cursor_visibility_state_ = false;
   state_on_unlock_->SetVisible(false);
   if (cursor_lock_count_ == 0 &&
--- a/ui/wm/core/cursor_manager.h
+++ b/ui/wm/core/cursor_manager.h
@@ -69,6 +69,7 @@
   bool ShouldHideCursorOnKeyEvent(const ui::KeyEvent& event) const override;
   bool ShouldHideCursorOnTouchEvent(const ui::TouchEvent& event) const override;
   gfx::Size GetSystemCursorSize() const override;
+  void SetNoHideCursor();
 
  private:
   // Overridden from NativeCursorManagerDelegate:
@@ -89,6 +90,10 @@
   // UnlockCursor().
   int cursor_lock_count_;
 
+  //---***FYDEOS BEGIN***---
+  bool no_hide_;
+  //---***FYDEOS END***---
+
   // The current state of the cursor.
   std::unique_ptr<internal::CursorState> current_state_;
 
--- a/fydeos/switches/display/display_switches.cc
+++ b/fydeos/switches/display/display_switches.cc
@@ -15,6 +15,14 @@
 const char kDefaultDSF[] = "fydeos-default-dsf";
 const char kScreenDpi[] = "fydeos-default-screen-dpi";
 
+const char kForceCursorCompositing[] = "fydeos-force-cursor-compositing";
+}
+
+const char kForceLegacyPlaneManager[] = "use-legacy-plane-manager";
+const char kForceShowCursor[] = "fydeos-force-show-cursor";
+
+bool ForceLegacyPlaneManager() {
+  return base::CommandLine::ForCurrentProcess()->HasSwitch(kForceLegacyPlaneManager);  
 }
 
 float GetDefaultDSF(float default_value) {
@@ -31,6 +39,14 @@
   return std::stof(factorStr);
 }
 
+bool ForceCursorCompositing() {
+  return base::CommandLine::ForCurrentProcess()->HasSwitch(kForceCursorCompositing);
+}
+
+bool ForceShowCursor() {
+  return base::CommandLine::ForCurrentProcess()->HasSwitch(kForceShowCursor);
+}
+
 } // switches
 } // fydeos
 
--- a/fydeos/switches/display/display_switches.h
+++ b/fydeos/switches/display/display_switches.h
@@ -6,13 +6,20 @@
 #define CHROMEOS_FYDEOS_SWITCHES_DISPLAY_SWITCHES_H_
 
 #include "chromeos/chromeos_export.h"
+#define EXPORT_ALL __attribute__((visibility("default")))
 
 namespace fydeos {
 namespace switches {
+EXPORT_ALL extern const char kForceLegacyPlaneManager[];
+EXPORT_ALL extern const char kForceShowCursor[];
+EXPORT_ALL bool ForceLegacyPlaneManager();
+EXPORT_ALL bool ForceShowCursor();
 
 CHROMEOS_EXPORT float GetDefaultDSF(float default_value);
 CHROMEOS_EXPORT float GetDefaultScreenDpi(float default_value);
 
+CHROMEOS_EXPORT bool ForceCursorCompositing();
+
 } // switches
 } // fydeos
 
--- a/ash/wm/native_cursor_manager_ash.cc
+++ b/ash/wm/native_cursor_manager_ash.cc
@@ -17,6 +17,9 @@
 #include "ui/base/layout.h"
 #include "ui/wm/core/cursor_loader.h"
 #include "ui/wm/core/native_cursor_manager_delegate.h"
+//---***FYDEOS BEGIN***---
+#include "fydeos/switches/display/display_switches.h"
+//---***FYDEOS END***---
 
 namespace ash {
 
@@ -138,6 +141,10 @@
   if (visible) {
     SetCursor(delegate->GetCursor(), delegate);
   } else {
+    //---***FYDEOS BEGIN***---
+    if (fydeos::switches::ForceShowCursor())
+      return;
+    //---***FYDEOS END***---
     gfx::NativeCursor invisible_cursor(ui::mojom::CursorType::kNone);
     cursor_loader_.SetPlatformCursor(&invisible_cursor);
     SetCursorOnAllRootWindows(invisible_cursor);
--- a/ui/ozone/platform/drm/gpu/drm_device.cc
+++ b/ui/ozone/platform/drm/gpu/drm_device.cc
@@ -30,6 +30,9 @@
 #include "ui/ozone/platform/drm/gpu/hardware_display_plane.h"
 #include "ui/ozone/platform/drm/gpu/hardware_display_plane_manager_atomic.h"
 #include "ui/ozone/platform/drm/gpu/hardware_display_plane_manager_legacy.h"
+//---***FYDEOS BEGIN***---
+#include "fydeos/switches/display/display_switches.h"
+//---***FYDEOS END***---
 
 namespace ui {
 
@@ -257,7 +260,13 @@
   }
 
   // Use atomic only if kernel allows it.
-  is_atomic_ = SetCapability(DRM_CLIENT_CAP_ATOMIC, 1);
+  //---***FYDEOS BEGIN***---
+  if (fydeos::switches::ForceLegacyPlaneManager())
+    is_atomic_=false;
+  else
+    is_atomic_ = SetCapability(DRM_CLIENT_CAP_ATOMIC, 1);
+  force_show_cursor_ = fydeos::switches::ForceShowCursor();
+  //---***FYDEOS END***---
   if (is_atomic_)
     plane_manager_ = std::make_unique<HardwareDisplayPlaneManagerAtomic>(this);
   else
@@ -481,6 +490,10 @@
   DCHECK(file_.IsValid());
   TRACE_EVENT2("drm", "DrmDevice::SetCursor", "crtc_id", crtc_id, "handle",
                handle);
+  //---***FYDEOS BEGIN***---
+  if(force_show_cursor_ && size.IsEmpty())
+    return true;
+  //---***FYDEOS END***---
   return !drmModeSetCursor(file_.GetPlatformFile(), crtc_id, handle,
                            size.width(), size.height());
 }
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -393,6 +393,7 @@
 #include "components/user_manager/user_manager.h"
 #include "services/service_manager/public/mojom/interface_provider_spec.mojom.h"
 #include "storage/browser/file_system/external_mount_points.h"
+#include "fydeos/switches/display/display_switches.h"
 #elif BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS)
 #include "chrome/browser/chrome_browser_main_linux.h"
 #elif BUILDFLAG(IS_ANDROID)
@@ -2445,6 +2446,10 @@
   static const char* const kCommonSwitchNames[] = {
       embedder_support::kUserAgent,
       switches::kUserDataDir,  // Make logs go to the right file.
+      //---***FYDEOS BEGIN***---
+      fydeos::switches::kForceLegacyPlaneManager,
+      fydeos::switches::kForceShowCursor,
+      //---***FYDEOS END***---
   };
   command_line->CopySwitchesFrom(browser_command_line, kCommonSwitchNames,
                                  std::size(kCommonSwitchNames));
--- a/ui/ozone/platform/drm/gpu/drm_device.h
+++ b/ui/ozone/platform/drm/gpu/drm_device.h
@@ -286,6 +286,9 @@
   const bool is_primary_device_;
 
   bool is_atomic_ = false;
+  //---***FYDEOS BEGIN***---
+  bool force_show_cursor_ = false;
+  //---***FYDEOS END***---
 
   bool allow_addfb2_modifiers_ = false;
 
--- a/ui/ozone/platform/drm/BUILD.gn
+++ b/ui/ozone/platform/drm/BUILD.gn
@@ -166,7 +166,7 @@
   }
 
   if (is_chromeos_ash) {
-    deps += [ "//ui/base/ime/ash" ]
+    deps += [ "//ui/base/ime/ash", "//fydeos/switches" ]
   }
 
   if (enable_vulkan) {
