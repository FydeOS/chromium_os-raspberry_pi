Index: raspberry-kernel/drivers/gpu/drm/drm_gem_dma_helper.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/drm_gem_dma_helper.c
+++ raspberry-kernel/drivers/gpu/drm/drm_gem_dma_helper.c
@@ -187,7 +187,7 @@ EXPORT_SYMBOL_GPL(drm_gem_dma_create);
  * A struct drm_gem_dma_object * on success or an ERR_PTR()-encoded negative
  * error code on failure.
  */
-static struct drm_gem_dma_object *
+struct drm_gem_dma_object *
 drm_gem_dma_create_with_handle(struct drm_file *file_priv,
 			       struct drm_device *drm, size_t size,
 			       uint32_t *handle)
@@ -214,6 +214,7 @@ drm_gem_dma_create_with_handle(struct dr

 	return dma_obj;
 }
+EXPORT_SYMBOL_GPL(drm_gem_dma_create_with_handle);

 /**
  * drm_gem_dma_free - free resources associated with a DMA GEM object
Index: raspberry-kernel/drivers/gpu/drm/v3d/v3d_vc4_bind.c
===================================================================
--- /dev/null
+++ raspberry-kernel/drivers/gpu/drm/v3d/v3d_vc4_bind.c
@@ -0,0 +1,43 @@
+#include <linux/fdtable.h>
+#include <drm/drm_drv.h>
+#include <drm/drm_file.h>
+#include <drm/drm_prime.h>
+#include <drm/drm_gem_dma_helper.h>
+#include "v3d_vc4_bind.h"
+
+int import_bo_from_vc4(struct drm_device *dev,
+    struct drm_file *file_priv, size_t unaligned_size, u32 *handle)
+{
+  struct drm_gem_dma_object *obj = NULL;
+  int ret, prime_fd = 0;
+  u32 vc4_handle = 0;
+  if (!is_vc4_enable())
+    return -ENODEV;
+  obj = drm_gem_dma_create_with_handle(vc4_drm_file, vc4_drm, unaligned_size, &vc4_handle);
+  ret = PTR_ERR_OR_ZERO(obj);
+  if (ret)
+    goto out;
+  ret = drm_gem_prime_handle_to_fd(vc4_drm, vc4_drm_file, vc4_handle,
+     DRM_CLOEXEC | DRM_RDWR, &prime_fd);
+  if (ret)
+    ret = drm_gem_prime_handle_to_fd(vc4_drm, vc4_drm_file, vc4_handle,
+         DRM_CLOEXEC, &prime_fd);
+  if (ret)
+    goto out;
+
+  ret = drm_gem_prime_fd_to_handle(dev, file_priv, prime_fd, handle);
+
+out:
+  if (prime_fd > 0) {
+    close_fd(prime_fd);
+  }
+  if (vc4_handle)
+    drm_gem_handle_delete(vc4_drm_file, vc4_handle);
+  if (ret)
+    DRM_ERROR("Borrow bo from vc4 size:%uk, vc4 handle:%u, fd:%d, v3d handle:%u, ret:%d\n",
+      (u32) (unaligned_size / 1024), vc4_handle, prime_fd, *handle, ret);
+  else
+    DRM_DEBUG("Borrow bo from vc4 size:%uk, vc4 handle:%u, fd:%d, v3d handle:%u, ret:%d\n",
+      (u32) (unaligned_size / 1024), vc4_handle, prime_fd, *handle, ret);
+  return ret;
+}
Index: raspberry-kernel/drivers/gpu/drm/v3d/v3d_vc4_bind.h
===================================================================
--- /dev/null
+++ raspberry-kernel/drivers/gpu/drm/v3d/v3d_vc4_bind.h
@@ -0,0 +1,20 @@
+// SPDX-License-Identifier: GPL-2.0+
+/* Copyright (C) 2023 FydeOS team */
+/* Author: Yang Tsao (yang@fydeos.io)*/
+
+#ifndef V3D_VC4_BIND_H
+#define V3D_VC4_BIND_H
+#define ARC_CALLOC (1<<7)
+struct drm_device;
+struct drm_file;
+
+extern struct drm_device *vc4_drm;
+extern struct drm_file *vc4_drm_file;
+
+static inline bool is_vc4_enable(void) {
+  return vc4_drm != NULL && vc4_drm_file != NULL;
+}
+
+int import_bo_from_vc4(struct drm_device *dev, struct drm_file *file_priv,
+  size_t unaligned_size, u32 *handle);
+#endif /* V3D_VC4_BIND_H */
Index: raspberry-kernel/drivers/gpu/drm/vc4/vc4_drv.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/vc4/vc4_drv.c
+++ raspberry-kernel/drivers/gpu/drm/vc4/vc4_drv.c
@@ -50,6 +50,11 @@
 #define DRIVER_MINOR 0
 #define DRIVER_PATCHLEVEL 0

+struct drm_device *vc4_drm = NULL;
+EXPORT_SYMBOL(vc4_drm);
+struct drm_file *vc4_drm_file = NULL;
+EXPORT_SYMBOL(vc4_drm_file);
+
 /* Helper function for mapping the regs on a platform device. */
 void __iomem *vc4_ioremap_regs(struct platform_device *pdev, int index)
 {
@@ -160,6 +165,13 @@ static int vc4_open(struct drm_device *d
 	return 0;
 }

+static int vc5_open(struct drm_device *dev, struct drm_file *file)
+{
+  if (file->minor->type == DRM_MINOR_PRIMARY)
+    vc4_drm_file = file;
+  return 0;
+}
+
 static void vc4_close(struct drm_device *dev, struct drm_file *file)
 {
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
@@ -175,6 +187,12 @@ static void vc4_close(struct drm_device
 	kfree(vc4file);
 }

+static void vc5_close(struct drm_device *dev, struct drm_file *file)
+{
+  if (file == vc4_drm_file)
+    vc4_drm_file = NULL;
+}
+
 DEFINE_DRM_GEM_FOPS(vc4_drm_fops);

 static const struct drm_ioctl_desc vc4_drm_ioctls[] = {
@@ -229,6 +247,8 @@ const struct drm_driver vc5_drm_driver =
 	.driver_features = (DRIVER_MODESET |
 			    DRIVER_ATOMIC |
 			    DRIVER_GEM),
+  .open = vc5_open,
+  .postclose = vc5_close,

 #if defined(CONFIG_DEBUG_FS)
 	.debugfs_init = vc4_debugfs_init,
@@ -418,6 +438,7 @@ static int vc4_drm_bind(struct device *d

 	drm_fbdev_generic_setup(drm, 16);

+  vc4_drm = drm;
 	return 0;

 unbind_all:
@@ -428,6 +449,8 @@ static void vc4_drm_unbind(struct device
 {
 	struct drm_device *drm = dev_get_drvdata(dev);

+  vc4_drm = NULL;
+  vc4_drm_file = NULL;
 	drm_dev_unplug(drm);
 	drm_atomic_helper_shutdown(drm);
 }
Index: raspberry-kernel/include/drm/drm_gem_dma_helper.h
===================================================================
--- raspberry-kernel.orig/include/drm/drm_gem_dma_helper.h
+++ raspberry-kernel/include/drm/drm_gem_dma_helper.h
@@ -142,6 +142,11 @@ int drm_gem_dma_dumb_create_internal(str
 				     struct drm_device *drm,
 				     struct drm_mode_create_dumb *args);

+struct drm_gem_dma_object *
+drm_gem_dma_create_with_handle(struct drm_file *file_priv,
+             struct drm_device *drm, size_t size,
+                         uint32_t *handle);
+
 /* create memory region for DRM framebuffer */
 int drm_gem_dma_dumb_create(struct drm_file *file_priv,
 			    struct drm_device *drm,
Index: raspberry-kernel/drivers/gpu/drm/v3d/v3d_bo.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/v3d/v3d_bo.c
+++ raspberry-kernel/drivers/gpu/drm/v3d/v3d_bo.c
@@ -24,6 +24,7 @@

 #include "v3d_drv.h"
 #include "uapi/drm/v3d_drm.h"
+#include "v3d_vc4_bind.h"

 /* Called DRM core on the last userspace/kernel unreference of the
  * BO.
@@ -174,11 +175,18 @@ int v3d_create_bo_ioctl(struct drm_devic
 	struct v3d_bo *bo = NULL;
 	int ret;

-	if (args->flags != 0) {
+	if (args->flags != 0 && !(args->flags & ARC_CALLOC)) {
 		DRM_INFO("unknown create_bo flags: %d\n", args->flags);
 		return -EINVAL;
 	}

+  if (is_vc4_enable() && args->flags == ARC_CALLOC) {
+    ret = import_bo_from_vc4(dev, file_priv, PAGE_ALIGN(args->size), &args->handle);
+    if (ret)
+      DRM_ERROR("import_bo_from_vc4 error:%d\n", ret);
+    return ret;
+  }
+
 	bo = v3d_bo_create(dev, file_priv, PAGE_ALIGN(args->size));
 	if (IS_ERR(bo))
 		return PTR_ERR(bo);
Index: raspberry-kernel/drivers/gpu/drm/v3d/Makefile
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/v3d/Makefile
+++ raspberry-kernel/drivers/gpu/drm/v3d/Makefile
@@ -4,6 +4,7 @@
 # core driver code
 v3d-y := \
 	v3d_bo.o \
+  v3d_vc4_bind.o \
 	v3d_drv.o \
 	v3d_fence.o \
 	v3d_gem.o \
Index: raspberry-kernel/drivers/gpu/drm/vc4/vc4_kms.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/vc4/vc4_kms.c
+++ raspberry-kernel/drivers/gpu/drm/vc4/vc4_kms.c
@@ -1121,9 +1122,18 @@ static const struct drm_mode_config_func
 	.fb_create = vc4_fb_create,
 };

+static int vc5_kms_atomic_commit(struct drm_device *dev, struct drm_atomic_state *state,
+                                 bool nonblock)
+{
+  struct vc4_dev *vc4 = to_vc4_dev(dev);
+  if (vc4->gen == VC4_GEN_5)
+    return drm_atomic_helper_commit(dev, state, nonblock);
+  return drm_atomic_helper_commit(dev, state, false);
+}
+
 static const struct drm_mode_config_funcs vc5_mode_funcs = {
 	.atomic_check = vc4_atomic_check,
-	.atomic_commit = drm_atomic_helper_commit,
+	.atomic_commit = vc5_kms_atomic_commit,
 	.fb_create = drm_gem_fb_create,
 };

Index: raspberry-kernel/drivers/gpu/drm/vc4/vc4_plane.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/vc4/vc4_plane.c
+++ raspberry-kernel/drivers/gpu/drm/vc4/vc4_plane.c
@@ -1829,6 +1829,10 @@ static int vc6_plane_mode_set(struct drm

 	/* Position Word 2: Source Image Size */
 	vc4_state->pos2_offset = vc4_state->dlist_count;
+  if (height < 2)
+    height = 2;
+  if (width < 2)
+    width = 2;
 	vc4_dlist_write(vc4_state,
 			VC4_SET_FIELD(height - 1,
 				      SCALER6_POS2_SRC_LINES) |
