Index: raspberry-kernel/drivers/gpu/drm/v3d/Makefile
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/v3d/Makefile
+++ raspberry-kernel/drivers/gpu/drm/v3d/Makefile
@@ -4,6 +4,7 @@
 # core driver code
 v3d-y := \
 	v3d_bo.o \
+  v3d_vc4_bind.o \
 	v3d_drv.o \
 	v3d_fence.o \
 	v3d_gem.o \
Index: raspberry-kernel/drivers/gpu/drm/v3d/v3d_bo.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/v3d/v3d_bo.c
+++ raspberry-kernel/drivers/gpu/drm/v3d/v3d_bo.c
@@ -24,6 +24,7 @@

 #include "v3d_drv.h"
 #include "uapi/drm/v3d_drm.h"
+#include "v3d_vc4_bind.h"

 /* Called DRM core on the last userspace/kernel unreference of the
  * BO.
@@ -174,11 +175,19 @@ int v3d_create_bo_ioctl(struct drm_devic
 	struct v3d_bo *bo = NULL;
 	int ret;

-	if (args->flags != 0) {
+	if (args->flags != 0 && !(args->flags & (CROS_CALLOC | ARC_CALLOC))) {
 		DRM_INFO("unknown create_bo flags: %d\n", args->flags);
 		return -EINVAL;
 	}

+  if (is_vc4_enable() && args->flags == ARC_CALLOC) {
+    ret = import_bo_from_vc4(dev, file_priv, PAGE_ALIGN(args->size), &args->handle);
+    if (ret) {
+      DRM_ERROR("import_bo_from_vc4 error:%d\n", ret);
+    }
+    return ret;
+  }
+
 	bo = v3d_bo_create(dev, file_priv, PAGE_ALIGN(args->size));
 	if (IS_ERR(bo))
 		return PTR_ERR(bo);
Index: raspberry-kernel/drivers/gpu/drm/v3d/v3d_vc4_bind.h
===================================================================
--- /dev/null
+++ raspberry-kernel/drivers/gpu/drm/v3d/v3d_vc4_bind.h
@@ -0,0 +1,21 @@
+// SPDX-License-Identifier: GPL-2.0+
+/* Copyright (C) 2023 FydeOS team */
+/* Author: Yang Tsao (yang@fydeos.io)*/
+
+#ifndef V3D_VC4_BIND_H
+#define V3D_VC4_BIND_H
+#include <drm/drm_device.h>
+#include <drm/drm_file.h>
+
+#define ARC_CALLOC (1<<7)
+#define CROS_CALLOC (1<<6)
+extern struct drm_device *vc4_drm;
+extern struct drm_file *vc4_drm_file;
+
+static inline bool is_vc4_enable(void) {
+  return vc4_drm != NULL && vc4_drm_file != NULL;
+}
+
+int import_bo_from_vc4(struct drm_device *dev, struct drm_file *file_priv,
+  size_t unaligned_size, u32 *handle);
+#endif /* V3D_VC4_BIND_H */
Index: raspberry-kernel/drivers/gpu/drm/v3d/v3d_drv.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/v3d/v3d_drv.c
+++ raspberry-kernel/drivers/gpu/drm/v3d/v3d_drv.c
@@ -149,14 +149,14 @@ DEFINE_DRM_GEM_FOPS(v3d_drm_fops);
  * need to stay DRM_AUTH until we do buffer size/offset validation.
  */
 static const struct drm_ioctl_desc v3d_drm_ioctls[] = {
-	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_CL, v3d_submit_cl_ioctl, DRM_RENDER_ALLOW | DRM_AUTH),
+	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_CL, v3d_submit_cl_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_WAIT_BO, v3d_wait_bo_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_CREATE_BO, v3d_create_bo_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_MMAP_BO, v3d_mmap_bo_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_GET_PARAM, v3d_get_param_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_GET_BO_OFFSET, v3d_get_bo_offset_ioctl, DRM_RENDER_ALLOW),
-	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_TFU, v3d_submit_tfu_ioctl, DRM_RENDER_ALLOW | DRM_AUTH),
-	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_CSD, v3d_submit_csd_ioctl, DRM_RENDER_ALLOW | DRM_AUTH),
+	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_TFU, v3d_submit_tfu_ioctl, DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(V3D_SUBMIT_CSD, v3d_submit_csd_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_PERFMON_CREATE, v3d_perfmon_create_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_PERFMON_DESTROY, v3d_perfmon_destroy_ioctl, DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(V3D_PERFMON_GET_VALUES, v3d_perfmon_get_values_ioctl, DRM_RENDER_ALLOW),
Index: raspberry-kernel/drivers/gpu/drm/v3d/v3d_vc4_bind.c
===================================================================
--- /dev/null
+++ raspberry-kernel/drivers/gpu/drm/v3d/v3d_vc4_bind.c
@@ -0,0 +1,47 @@
+#include <linux/fdtable.h>
+#include <drm/drm_drv.h>
+#include <drm/drm_prime.h>
+#include "v3d_vc4_bind.h"
+#include "../vc4/vc4_drv.h"
+
+#include "uapi/drm/vc4_drm.h"
+
+int import_bo_from_vc4(struct drm_device *dev,
+    struct drm_file *file_priv, size_t unaligned_size, u32 *handle)
+{
+  struct drm_vc4_create_bo args = {0};
+  int ret, prime_fd = 0;
+  u32 vc4_handle = 0;
+  if (!is_vc4_enable())
+    return -ENODEV;
+
+  args.size = unaligned_size;
+  args.flags = ARC_CALLOC;
+  ret = vc4_create_bo_ioctl(vc4_drm, &args, vc4_drm_file);
+  if (ret)
+    goto out;
+  vc4_handle = args.handle;
+  ret = drm_gem_prime_handle_to_fd(vc4_drm, vc4_drm_file, args.handle,
+     DRM_CLOEXEC | DRM_RDWR, &prime_fd);
+  if (ret)
+    ret = drm_gem_prime_handle_to_fd(vc4_drm, vc4_drm_file, args.handle,
+         DRM_CLOEXEC, &prime_fd);
+  if (ret)
+    goto out;
+
+  ret = drm_gem_prime_fd_to_handle(dev, file_priv, prime_fd, handle);
+
+out:
+  if(prime_fd) {
+    close_fd(prime_fd);
+  }
+  if(vc4_handle)
+    drm_gem_handle_delete(vc4_drm_file, vc4_handle);
+  if (ret)
+    DRM_ERROR("Borrow bo from vc4 size:%uk, vc4 handle:%u, fd:%d, v3d handle:%u, ret:%d\n",
+      (u32) (unaligned_size / 1024), vc4_handle, prime_fd, *handle, ret);
+  else
+    DRM_DEBUG("Borrow bo from vc4 size:%uk, vc4 handle:%u, fd:%d, v3d handle:%u, ret:%d\n",
+      (u32) (unaligned_size / 1024), vc4_handle, prime_fd, *handle, ret);
+  return ret;
+}
Index: raspberry-kernel/drivers/gpu/drm/vc4/vc4_bo.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/vc4/vc4_bo.c
+++ raspberry-kernel/drivers/gpu/drm/vc4/vc4_bo.c
@@ -22,7 +22,6 @@

 #include "vc4_drv.h"
 #include "uapi/drm/vc4_drm.h"
-
 static const struct drm_gem_object_funcs vc4_gem_object_funcs;

 static const char * const bo_type_names[] = {
@@ -34,13 +33,41 @@ static const char * const bo_type_names[
 	"RCL",
 	"BCL",
 	"kernel BO cache",
+  "V3D Bind",
 };

+static const char del_label[] = "[deleted]";
+static const char user_label[] = "[user label]";
+
 static bool is_user_label(int label)
 {
 	return label >= VC4_BO_TYPE_COUNT;
 }

+#ifdef CONFIG_DRM_V3D
+#undef WARN_ON_ONCE
+#define WARN_ON_ONCE(x) 0
+#endif
+
+#ifdef DEBUG
+  static const char * label_name(int label) {
+    if (label < 0 )
+      return del_label;
+    if (label >= VC4_BO_TYPE_COUNT)
+      return user_label;
+    return bo_type_names[label];
+  }
+
+  static void print_bo_status(const char *func, u32 handle, struct vc4_bo *bo) {
+    if (!bo || !func)
+      return;
+    DRM_INFO("%s: %s:handle:%u, size:%lu, ref:%u, mad:%d\n", func, label_name(bo->label),
+      handle, bo->base.base.size/1024, refcount_read(&bo->usecnt), bo->madv);
+  }
+#else
+  static void print_bo_status(const char *func, u32 handle, struct vc4_bo *bo) {}
+#endif
+
 static void vc4_bo_stats_print(struct drm_printer *p, struct vc4_dev *vc4)
 {
 	int i;
@@ -170,6 +197,7 @@ static void vc4_bo_destroy(struct vc4_bo

 	lockdep_assert_held(&vc4->bo_lock);

+  print_bo_status(__func__, 0, bo);
 	vc4_bo_set_label(obj, -1);

 	if (bo->validated_shader) {
@@ -250,10 +278,10 @@ static void vc4_bo_cache_purge(struct dr
 void vc4_bo_add_to_purgeable_pool(struct vc4_bo *bo)
 {
 	struct vc4_dev *vc4 = to_vc4_dev(bo->base.base.dev);
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return;
-
+#endif
 	mutex_lock(&vc4->purgeable.lock);
 	list_add_tail(&bo->size_head, &vc4->purgeable.list);
 	vc4->purgeable.num++;
@@ -264,10 +292,10 @@ void vc4_bo_add_to_purgeable_pool(struct
 static void vc4_bo_remove_from_purgeable_pool_locked(struct vc4_bo *bo)
 {
 	struct vc4_dev *vc4 = to_vc4_dev(bo->base.base.dev);
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return;
-
+#endif
 	/* list_del_init() is used here because the caller might release
 	 * the purgeable lock in order to acquire the madv one and update the
 	 * madv status.
@@ -395,10 +423,10 @@ struct drm_gem_object *vc4_create_object
 {
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	struct vc4_bo *bo;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return ERR_PTR(-ENODEV);
-
+#endif
 	bo = kzalloc(sizeof(*bo), GFP_KERNEL);
 	if (!bo)
 		return ERR_PTR(-ENOMEM);
@@ -426,10 +454,10 @@ struct vc4_bo *vc4_bo_create(struct drm_
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	struct drm_gem_dma_object *dma_obj;
 	struct vc4_bo *bo;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return ERR_PTR(-ENODEV);
-
+#endif
 	if (size == 0)
 		return ERR_PTR(-EINVAL);

@@ -495,10 +523,10 @@ int vc4_bo_dumb_create(struct drm_file *
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	struct vc4_bo *bo = NULL;
 	int ret;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	ret = vc4_dumb_fixup_args(args);
 	if (ret)
 		return ret;
@@ -553,6 +581,7 @@ static void vc4_free_object(struct drm_g
 		vc4_bo_remove_from_purgeable_pool(bo);
 	mutex_unlock(&bo->madv_lock);

+  print_bo_status(__func__, 0, bo);
 	mutex_lock(&vc4->bo_lock);
 	/* If the object references someone else's memory, we can't cache it.
 	 */
@@ -621,10 +650,10 @@ int vc4_bo_inc_usecnt(struct vc4_bo *bo)
 {
 	struct vc4_dev *vc4 = to_vc4_dev(bo->base.base.dev);
 	int ret;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	/* Fast path: if the BO is already retained by someone, no need to
 	 * check the madv status.
 	 */
@@ -660,10 +689,10 @@ int vc4_bo_inc_usecnt(struct vc4_bo *bo)
 void vc4_bo_dec_usecnt(struct vc4_bo *bo)
 {
 	struct vc4_dev *vc4 = to_vc4_dev(bo->base.base.dev);
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return;
-
+#endif
 	/* Fast path: if the BO is still retained by someone, no need to test
 	 * the madv value.
 	 */
@@ -675,6 +704,7 @@ void vc4_bo_dec_usecnt(struct vc4_bo *bo
 	    bo->madv == VC4_MADV_DONTNEED)
 		vc4_bo_add_to_purgeable_pool(bo);
 	mutex_unlock(&bo->madv_lock);
+	print_bo_status(__func__, 0, bo);
 }

 static void vc4_bo_cache_time_timer(struct timer_list *t)
@@ -700,6 +730,7 @@ static struct dma_buf *vc4_prime_export(
 	 * exported BO is released. This shouldn't be a problem since we don't
 	 * expect exported BOs to be marked as purgeable.
 	 */
+
 	ret = vc4_bo_inc_usecnt(bo);
 	if (ret) {
 		DRM_ERROR("Failed to increment BO usecnt\n");
@@ -766,7 +797,11 @@ static const struct drm_gem_object_funcs
 static int vc4_grab_bin_bo(struct vc4_dev *vc4, struct vc4_file *vc4file)
 {
 	if (!vc4->v3d)
+#ifdef CONFIG_DRM_V3D
+		return 0;
+#else
 		return -ENODEV;
+#endif

 	if (vc4file->bin_bo_used)
 		return 0;
@@ -782,19 +817,20 @@ int vc4_create_bo_ioctl(struct drm_devic
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	struct vc4_bo *bo = NULL;
 	int ret;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
 	ret = vc4_grab_bin_bo(vc4, vc4file);
 	if (ret)
 		return ret;
+#endif

 	/*
 	 * We can't allocate from the BO cache, because the BOs don't
 	 * get zeroed, and that might leak data between users.
 	 */
-	bo = vc4_bo_create(dev, args->size, false, VC4_BO_TYPE_V3D);
+	bo = vc4_bo_create(dev, args->size, false, args->flags == V3D_BIND ?
+					VC4_BO_TYPE_V3D_BIND : VC4_BO_TYPE_V3D);
 	if (IS_ERR(bo))
 		return PTR_ERR(bo);

@@ -803,8 +839,10 @@ int vc4_create_bo_ioctl(struct drm_devic
 	ret = drm_gem_handle_create(file_priv, &bo->base.base, &args->handle);
 	drm_gem_object_put(&bo->base.base);

+  print_bo_status(__func__, args->handle, bo);
 	return ret;
 }
+EXPORT_SYMBOL(vc4_create_bo_ioctl);

 int vc4_mmap_bo_ioctl(struct drm_device *dev, void *data,
 		      struct drm_file *file_priv)
@@ -812,10 +850,10 @@ int vc4_mmap_bo_ioctl(struct drm_device
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	struct drm_vc4_mmap_bo *args = data;
 	struct drm_gem_object *gem_obj;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	gem_obj = drm_gem_object_lookup(file_priv, args->handle);
 	if (!gem_obj) {
 		DRM_DEBUG("Failed to look up GEM BO %d\n", args->handle);
@@ -838,10 +876,10 @@ vc4_create_shader_bo_ioctl(struct drm_de
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	struct vc4_bo *bo = NULL;
 	int ret;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	if (args->size == 0)
 		return -EINVAL;

@@ -917,10 +955,10 @@ int vc4_set_tiling_ioctl(struct drm_devi
 	struct drm_gem_object *gem_obj;
 	struct vc4_bo *bo;
 	bool t_format;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	if (args->flags != 0)
 		return -EINVAL;

@@ -963,10 +1001,10 @@ int vc4_get_tiling_ioctl(struct drm_devi
 	struct drm_vc4_get_tiling *args = data;
 	struct drm_gem_object *gem_obj;
 	struct vc4_bo *bo;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	if (args->flags != 0 || args->modifier != 0)
 		return -EINVAL;

@@ -993,9 +1031,10 @@ int vc4_bo_debugfs_init(struct drm_minor
 	struct vc4_dev *vc4 = to_vc4_dev(drm);
 	int ret;

+#ifndef CONFIG_DRM_V3D
 	if (!vc4->v3d)
 		return -ENODEV;
-
+#endif
 	ret = vc4_debugfs_add_file(minor, "bo_stats",
 				   vc4_bo_stats_debugfs, NULL);
 	if (ret)
@@ -1010,10 +1049,10 @@ int vc4_bo_cache_init(struct drm_device
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	int ret;
 	int i;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	/* Create the initial set of BO labels that the kernel will
 	 * use.  This lets us avoid a bunch of string reallocation in
 	 * the kernel's draw and BO allocation paths.
@@ -1074,10 +1113,10 @@ int vc4_label_bo_ioctl(struct drm_device
 	char *name;
 	struct drm_gem_object *gem_obj;
 	int ret = 0, label;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	if (!args->len)
 		return -EINVAL;

Index: raspberry-kernel/drivers/gpu/drm/drm_gem.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/drm_gem.c
+++ raspberry-kernel/drivers/gpu/drm/drm_gem.c
@@ -1118,7 +1118,8 @@ int drm_gem_mmap(struct file *filp, stru
 	ret = drm_gem_mmap_obj(obj, drm_vma_node_size(node) << PAGE_SHIFT,
 			       vma);

-	drm_gem_object_put(obj);
+  //if (kref_read(&obj->refcount) > 1)
+	  drm_gem_object_put(obj);

 	return ret;
 }
Index: raspberry-kernel/drivers/gpu/drm/vc4/vc4_debugfs.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/vc4/vc4_debugfs.c
+++ raspberry-kernel/drivers/gpu/drm/vc4/vc4_debugfs.c
@@ -27,8 +27,8 @@ vc4_debugfs_init(struct drm_minor *minor
 	if (vc4->hvs)
 		drm_WARN_ON(drm, vc4_hvs_debugfs_init(minor));

+	vc4_bo_debugfs_init(minor);
 	if (vc4->v3d) {
-		drm_WARN_ON(drm, vc4_bo_debugfs_init(minor));
 		drm_WARN_ON(drm, vc4_v3d_debugfs_init(minor));
 	}
 }
Index: raspberry-kernel/drivers/gpu/drm/vc4/vc4_drv.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/vc4/vc4_drv.c
+++ raspberry-kernel/drivers/gpu/drm/vc4/vc4_drv.c
@@ -50,6 +50,16 @@
 #define DRIVER_MINOR 0
 #define DRIVER_PATCHLEVEL 0

+#ifdef CONFIG_DRM_V3D
+#undef WARN_ON_ONCE
+#define WARN_ON_ONCE(x) 0
+#endif
+
+struct drm_device *vc4_drm = NULL;
+EXPORT_SYMBOL(vc4_drm);
+struct drm_file *vc4_drm_file = NULL;
+EXPORT_SYMBOL(vc4_drm_file);
+
 /* Helper function for mapping the regs on a platform device. */
 void __iomem *vc4_ioremap_regs(struct platform_device *pdev, int index)
 {
@@ -97,10 +107,10 @@ static int vc4_get_param_ioctl(struct dr

 	if (args->pad != 0)
 		return -EINVAL;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	if (!vc4->v3d)
 		return -ENODEV;

@@ -146,17 +156,21 @@ static int vc4_open(struct drm_device *d
 {
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	struct vc4_file *vc4file;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	vc4file = kzalloc(sizeof(*vc4file), GFP_KERNEL);
 	if (!vc4file)
 		return -ENOMEM;
 	vc4file->dev = vc4;

+#ifndef CONFIG_DRM_V3D
 	vc4_perfmon_open_file(vc4file);
+#endif
 	file->driver_priv = vc4file;
+  if (file->minor->type == DRM_MINOR_PRIMARY && !vc4_drm_file)
+    vc4_drm_file = file;
 	return 0;
 }

@@ -164,14 +178,18 @@ static void vc4_close(struct drm_device
 {
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	struct vc4_file *vc4file = file->driver_priv;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return;
-
+#endif
 	if (vc4file->bin_bo_used)
 		vc4_v3d_bin_bo_put(vc4);

+#ifndef CONFIG_DRM_V3D
 	vc4_perfmon_close_file(vc4file);
+#endif
+  if (file == vc4_drm_file)
+    vc4_drm_file = NULL;
 	kfree(vc4file);
 }

@@ -226,13 +244,21 @@ const struct drm_driver vc4_drm_driver =
 };

 const struct drm_driver vc5_drm_driver = {
+  .open = vc4_open,
+  .postclose = vc4_close,
 	.driver_features = (DRIVER_MODESET |
-			    DRIVER_ATOMIC |
+			    DRIVER_ATOMIC  |
 			    DRIVER_GEM),

 #if defined(CONFIG_DEBUG_FS)
 	.debugfs_init = vc4_debugfs_init,
 #endif
+  .gem_create_object = vc4_create_object,
+  .gem_prime_mmap = drm_gem_prime_mmap,
+  .prime_handle_to_fd = drm_gem_prime_handle_to_fd,
+  .prime_fd_to_handle = drm_gem_prime_fd_to_handle,
+  .ioctls = vc4_drm_ioctls,
+  .num_ioctls = ARRAY_SIZE(vc4_drm_ioctls),

 	DRM_GEM_DMA_DRIVER_OPS_WITH_DUMB_CREATE(vc5_dumb_create),

@@ -346,7 +372,9 @@ static int vc4_drm_bind(struct device *d
 	platform_set_drvdata(pdev, drm);
 	INIT_LIST_HEAD(&vc4->debugfs_list);

+#ifndef CONFIG_DRM_V3D
 	if (gen == VC4_GEN_4) {
+#endif
 		ret = drmm_mutex_init(drm, &vc4->bin_bo_lock);
 		if (ret)
 			return ret;
@@ -354,17 +382,23 @@ static int vc4_drm_bind(struct device *d
 		ret = vc4_bo_cache_init(drm);
 		if (ret)
 			return ret;
+#ifndef CONFIG_DRM_V3D
 	}
+#endif

 	ret = drmm_mode_config_init(drm);
 	if (ret)
 		return ret;

+#ifndef CONFIG_DRM_V3D
 	if (gen == VC4_GEN_4) {
+#endif
 		ret = vc4_gem_init(drm);
 		if (ret)
 			return ret;
+#ifndef CONFIG_DRM_V3D
 	}
+#endif

 	node = of_find_compatible_node(NULL, NULL, "raspberrypi,bcm2835-firmware");
 	if (node) {
@@ -418,6 +452,7 @@ static int vc4_drm_bind(struct device *d

 	drm_fbdev_generic_setup(drm, 16);

+  vc4_drm = drm;
 	return 0;

 unbind_all:
@@ -428,6 +463,8 @@ static void vc4_drm_unbind(struct device
 {
 	struct drm_device *drm = dev_get_drvdata(dev);

+  vc4_drm = NULL;
+  vc4_drm_file = NULL;
 	drm_dev_unplug(drm);
 	drm_atomic_helper_shutdown(drm);
 }
Index: raspberry-kernel/drivers/gpu/drm/vc4/vc4_drv.h
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/vc4/vc4_drv.h
+++ raspberry-kernel/drivers/gpu/drm/vc4/vc4_drv.h
@@ -25,6 +25,10 @@
 #include "uapi/drm/vc4_drm.h"
 #include "vc4_regs.h"

+#define CURSOR_TIMEOUT_MSEC 20
+#define V3D_BIND (1<<7)
+#define CONFIG_DRM_V3D 1
+
 struct drm_device;
 struct drm_gem_object;

@@ -46,6 +50,7 @@ enum vc4_kernel_bo_type {
 	VC4_BO_TYPE_RCL,
 	VC4_BO_TYPE_BCL,
 	VC4_BO_TYPE_KERNEL_CACHE,
+  VC4_BO_TYPE_V3D_BIND,
 	VC4_BO_TYPE_COUNT
 };

@@ -719,7 +724,7 @@ to_vc4_crtc_state(const struct drm_crtc_
 {
 	return container_of(crtc_state, struct vc4_crtc_state, base);
 }
-
+#ifndef CONFIG_DRM_V3D
 #define V3D_READ(offset)								\
 	({										\
 		kunit_fail_current_test("Accessing a register in a unit test!\n");	\
@@ -731,6 +736,18 @@ to_vc4_crtc_state(const struct drm_crtc_
 		kunit_fail_current_test("Accessing a register in a unit test!\n");	\
 		writel(val, vc4->v3d->regs + (offset));					\
 	} while (0)
+#else //!CONFIG_DRM_V3D
+#define V3D_READ(offset)                \
+  ({                    \
+    kunit_fail_current_test("Accessing a register in a unit test!\n");  \
+    readl(NULL);  \
+  })
+
+#define V3D_WRITE(offset, val)                \
+  do {                    \
+    kunit_fail_current_test("Accessing a register in a unit test!\n");  \
+  } while (0)
+#endif //!CONFIG_DRM_V3D

 #define HVS_READ(offset)								\
 	({										\
@@ -988,7 +1005,7 @@ struct vc4_bo *vc4_bo_create(struct drm_
 int vc4_bo_dumb_create(struct drm_file *file_priv,
 		       struct drm_device *dev,
 		       struct drm_mode_create_dumb *args);
-int vc4_create_bo_ioctl(struct drm_device *dev, void *data,
+extern int vc4_create_bo_ioctl(struct drm_device *dev, void *data,
 			struct drm_file *file_priv);
 int vc4_create_shader_bo_ioctl(struct drm_device *dev, void *data,
 			       struct drm_file *file_priv);
@@ -1139,6 +1156,7 @@ void vc4_hvs_dump_state(struct vc4_hvs *
 void vc4_hvs_unmask_underrun(struct vc4_hvs *hvs, int channel);
 void vc4_hvs_mask_underrun(struct vc4_hvs *hvs, int channel);
 int vc4_hvs_debugfs_init(struct drm_minor *minor);
+u8 vc4_hvs_get_fifo_frame_count(struct vc4_hvs *hvs, unsigned int fifo);

 /* vc4_kms.c */
 int vc4_kms_load(struct drm_device *dev);
Index: raspberry-kernel/drivers/gpu/drm/vc4/vc4_gem.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/vc4/vc4_gem.c
+++ raspberry-kernel/drivers/gpu/drm/vc4/vc4_gem.c
@@ -293,7 +293,7 @@ vc4_reset(struct drm_device *dev)
 	DRM_INFO("Resetting GPU.\n");

 	mutex_lock(&vc4->power_lock);
-	if (vc4->power_refcount) {
+	if (vc4->power_refcount && vc4->v3d) {
 		/* Power the device off and back on the by dropping the
 		 * reference on runtime PM.
 		 */
@@ -1310,6 +1310,7 @@ int vc4_gem_init(struct drm_device *dev)
 	struct vc4_dev *vc4 = to_vc4_dev(dev);
 	int ret;

+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;

@@ -1320,6 +1321,7 @@ int vc4_gem_init(struct drm_device *dev)
 	INIT_LIST_HEAD(&vc4->job_done_list);
 	INIT_LIST_HEAD(&vc4->seqno_cb_list);
 	spin_lock_init(&vc4->job_lock);
+#endif

 	INIT_WORK(&vc4->hangcheck.reset_work, vc4_reset_work);
 	timer_setup(&vc4->hangcheck.timer, vc4_hangcheck_elapsed, 0);
@@ -1368,10 +1370,10 @@ int vc4_gem_madvise_ioctl(struct drm_dev
 	struct drm_gem_object *gem_obj;
 	struct vc4_bo *bo;
 	int ret;
-
+#ifndef CONFIG_DRM_V3D
 	if (WARN_ON_ONCE(vc4->gen > VC4_GEN_4))
 		return -ENODEV;
-
+#endif
 	switch (args->madv) {
 	case VC4_MADV_DONTNEED:
 	case VC4_MADV_WILLNEED:
Index: raspberry-kernel/drivers/gpu/drm/vc4/vc4_kms.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/vc4/vc4_kms.c
+++ raspberry-kernel/drivers/gpu/drm/vc4/vc4_kms.c
@@ -1116,9 +1116,15 @@ static struct drm_mode_config_helper_fun
 	.atomic_commit_tail	= vc4_atomic_commit_tail,
 };

+int vc4_kms_atomic_commit(struct drm_device *dev,
+    struct drm_atomic_state *state, bool nonblock) {
+  /*force block commit to avoid hvs DLIST ENOSPC error*/
+  return drm_atomic_helper_commit(dev, state, false);
+}
+
 static const struct drm_mode_config_funcs vc4_mode_funcs = {
 	.atomic_check = vc4_atomic_check,
-	.atomic_commit = drm_atomic_helper_commit,
+	.atomic_commit = vc4_kms_atomic_commit,
 	.fb_create = vc4_fb_create,
 };

Index: raspberry-kernel/drivers/gpu/drm/vc4/vc4_hvs.c
===================================================================
--- raspberry-kernel.orig/drivers/gpu/drm/vc4/vc4_hvs.c
+++ raspberry-kernel/drivers/gpu/drm/vc4/vc4_hvs.c
@@ -604,6 +604,49 @@ static void vc4_hvs_irq_clear_eof(struct
 	hvs->eof_irq[channel].enabled = false;
 }

+static void vc4_hvs_free_dlist_entry_locked(struct vc4_hvs *hvs,
+					    struct vc4_hvs_dlist_allocation *alloc)
+{
+	lockdep_assert_held(&hvs->mm_lock);
+
+	if (!list_empty(&alloc->node))
+		list_del(&alloc->node);
+
+	drm_mm_remove_node(&alloc->mm_node);
+	kfree(alloc);
+}
+
+/*
+ * Frame counts are essentially sequence numbers over 6 bits, and we
+ * thus can use sequence number arithmetic and follow the RFC1982 to
+ * implement proper comparison between them.
+ */
+static bool vc4_hvs_frcnt_lte(u8 cnt1, u8 cnt2)
+{
+	return (s8)((cnt1 << 2) - (cnt2 << 2)) <= 0;
+}
+
+static int clean_hvs_dlist(struct vc4_hvs *hvs)
+{
+  struct vc4_hvs_dlist_allocation *cur, *next;
+  unsigned long flags;
+	int free_counter = 0;
+  spin_lock_irqsave(&hvs->mm_lock, flags);
+  list_for_each_entry_safe(cur, next, &hvs->stale_dlist_entries, node) {
+    u8 frcnt;
+
+    frcnt = vc4_hvs_get_fifo_frame_count(hvs, cur->channel);
+    if (!vc4_hvs_frcnt_lte(cur->target_frame_count, frcnt))
+      continue;
+
+    vc4_hvs_free_dlist_entry_locked(hvs, cur);
+		free_counter++;
+  }
+	spin_unlock_irqrestore(&hvs->mm_lock, flags);
+  drm_warn(&hvs->vc4->base, "Free DLIST: %d\n", free_counter);
+  return free_counter;
+}
+
 static struct vc4_hvs_dlist_allocation *
 vc4_hvs_alloc_dlist_entry(struct vc4_hvs *hvs,
 			  unsigned int channel,
@@ -613,6 +656,7 @@ vc4_hvs_alloc_dlist_entry(struct vc4_hvs
 	struct drm_device *dev = &vc4->base;
 	struct vc4_hvs_dlist_allocation *alloc;
 	unsigned long flags;
+  int try_again = 1;
 	int ret;

 	if (channel == VC4_HVS_CHANNEL_DISABLED)
@@ -623,31 +667,33 @@ vc4_hvs_alloc_dlist_entry(struct vc4_hvs
 		return ERR_PTR(-ENOMEM);

 	INIT_LIST_HEAD(&alloc->node);
-
+insert_node:
 	spin_lock_irqsave(&hvs->mm_lock, flags);
 	ret = drm_mm_insert_node(&hvs->dlist_mm, &alloc->mm_node,
 				 dlist_count);
 	spin_unlock_irqrestore(&hvs->mm_lock, flags);
 	if (ret) {
 		drm_err(dev, "Failed to allocate DLIST entry: %d\n", ret);
-		return ERR_PTR(ret);
+    if (ret == -ENOSPC && try_again) {
+			ret = clean_hvs_dlist(hvs);
+			try_again = 0;
+			if (!ret) {
+        ret = -ENOSPC;
+        goto err;
+      }
+			goto insert_node;
+    } else {
+			goto err;
+		}
 	}

 	alloc->channel = channel;

 	return alloc;
-}
-
-static void vc4_hvs_free_dlist_entry_locked(struct vc4_hvs *hvs,
-					    struct vc4_hvs_dlist_allocation *alloc)
-{
-	lockdep_assert_held(&hvs->mm_lock);
-
-	if (!list_empty(&alloc->node))
-		list_del(&alloc->node);

-	drm_mm_remove_node(&alloc->mm_node);
+err:
 	kfree(alloc);
+  return ERR_PTR(ret);
 }

 void vc4_hvs_mark_dlist_entry_stale(struct vc4_hvs *hvs,
@@ -703,16 +749,6 @@ static void vc4_hvs_schedule_dlist_sweep
 }

 /*
- * Frame counts are essentially sequence numbers over 6 bits, and we
- * thus can use sequence number arithmetic and follow the RFC1982 to
- * implement proper comparison between them.
- */
-static bool vc4_hvs_frcnt_lte(u8 cnt1, u8 cnt2)
-{
-	return (s8)((cnt1 << 2) - (cnt2 << 2)) <= 0;
-}
-
-/*
  * Some atomic commits (legacy cursor updates, mostly) will not wait for
  * the next vblank and will just return once the commit has been pushed
  * to the hardware.
